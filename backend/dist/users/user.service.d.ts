import { Repository } from 'typeorm';
import { UserEntity } from './orm/user.entity';
import { GameEntity } from './orm/game.entity';
export declare class UserService {
    private userRepository;
    private gameRepository;
    static inGameUsersSet: Set<number>;
    constructor(userRepository: Repository<UserEntity>, gameRepository: Repository<GameEntity>);
    find_all_users(): Promise<UserEntity[]>;
    find_user_by_id(id: number): Promise<UserEntity>;
    find_user_by_login(login: string): Promise<UserEntity>;
    find_user_by_userName(userName: string): Promise<UserEntity>;
    find_user_ID_by_userName(userName: string): Promise<number>;
    find_user_ID_by_login(login: string): Promise<number>;
    add_new_user(payload: any): Promise<void>;
    change_username(login: string, newUserName: string): Promise<UserEntity>;
    change_avatar(login: string, newAvatar: string): Promise<UserEntity>;
    reset_avatar(id: number): Promise<import("typeorm").UpdateResult>;
    enable_2fa(login: string): Promise<string>;
    turn_2fa_on(login: string): Promise<void>;
    clear2fa(login: string): Promise<void>;
    get_QRCode(login: string): Promise<string>;
    remove_2fa(login: string): Promise<void>;
    sendFriendRequest(login: string, friendLogin: string): Promise<void>;
    addFriend(login: string, friendId: number): Promise<void>;
    clearUpdatePendingAndRequestList(receiver: string, sender: string): Promise<void>;
    removeFriend(login: string, friendUsername: string): Promise<void>;
    getPendingList(id: number): Promise<any[]>;
    getFriendsList(id: number): Promise<any[]>;
    getSentRequestsList(id: number): Promise<any[]>;
    blockUser(login: string, usernameToBlock: string): Promise<void>;
    unblockUser(login: string, usernameToUnblock: string): Promise<void>;
    getUsersIBlockList(id: number): Promise<any[]>;
    getUsersWhoBlockedMeList(id: number): Promise<any[]>;
    incrementRankAndTitle(id: number): Promise<void>;
    incrementLost(id: number): Promise<void>;
    add_inGameUser(id: number): Promise<void>;
    remove_inGameUser(id: number): Promise<void>;
    getInGameUsers(): Promise<any[]>;
    register_MatchHistory(data: any): Promise<void>;
    getMatchHistory(user: UserEntity): Promise<any[]>;
    getLeaderBoard(): Promise<any[]>;
}
